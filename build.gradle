buildscript {
    ext.kotlin_version = '1.2.30'
    ext.okHttpVersion = "3.9.0"
    ext.retrofitVersion = '2.4.0'
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin'

repositories {
    jcenter()
}

dependencies {
    implementation gradleApi()
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"

    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    implementation 'io.reactivex.rxjava2:rxjava:2.1.12'

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.nhaarman:mockito-kotlin:1.5.0'
    testImplementation 'org.amshove.kluent:kluent:1.34'
}

test {
    //ignoreFailures true
    testLogging {
        exceptionFormat = 'full'
    }
}

apply plugin: 'jacoco'
task coverage(type: JacocoReport, dependsOn: "test") {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    // what to exclude from coverage report
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Fragment.*',
            '**/*Activity.*',
            '**/*$Lambda$*.*', // Jacoco can not handleCommonError several "$" in class name.
            '**/*Module.*', // Modules for Dagger.
            '**/*Module_*Factory*', // Modules for Dagger.
            '**/*Dagger*.*', // Dagger auto-generated code.
            '**/*MembersInjector*.*', // Dagger auto-generated code.
            '**/*_Provide*Factory*.*',
            '**/*_Factory.*', //Dagger auto-generated code
            '**/*$*$*.*' // Anonymous classes generated by kotlin
    ]

    classDirectories = fileTree(
            dir: "$buildDir/classes/java", excludes: excludes
    ) + fileTree(
            dir: "$buildDir/classes/kotlin", excludes: excludes
    )

    sourceDirectories = files(["src/main/java"])
    executionData = files("$buildDir/jacoco/test.exec")
}

check.dependsOn(coverage)