import gradle.BuildChecksPlugin

buildscript {
    ext.kotlin_version = '1.2.30'
    ext.okHttpVersion = "3.9.0"
    ext.retrofitVersion = '2.4.0'
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        flatDir { dirs "build/libs", "libs" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.10"
        classpath "com.toddway:buildChecks:1.8"

        //these are here because they're dependencies of the buildStatusPlugin jar file
        classpath 'io.reactivex.rxjava2:rxjava:2.1.14'
        classpath "com.squareup.retrofit2:retrofit:$retrofitVersion"
        classpath "com.squareup.retrofit2:converter-gson:$retrofitVersion"
        classpath "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
        classpath "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    }
}

plugins {
    id "io.gitlab.arturbosch.detekt" version "1.0.0.RC6"
}

apply plugin: BuildChecksPlugin
buildChecks {
    //baseUrl = "https://api.github.com/repos/toddway/BuildChecks/"
    baseUrl = "https://api.bitbucket.org/2.0/repositories/toddway/buildchecks/"
    authorization = System.properties["auth"]
    buildUrl = System.properties["buildUrl"]
    jacocoReports = "$projectDir/build/reports/jacoco/coverage/coverage.xml"
    checkstyleReports = "$projectDir/build/reports/detekt-checkstyle.xml"
    minCoveragePercent = 50
    maxLintViolations = 5
}

detekt {
    version = "1.0.0.RC6"
    //profile = 'main'
    profile("main") {
        input = "$projectDir/src/main/kotlin"
        //config = "$projectDir/detekt.yml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
        output = "$projectDir/build/reports"
        //plugins = "$projectDir/vml-1.0.0.RC6.jar"
    }
}

apply plugin: "com.gradle.plugin-publish"
apply plugin: 'kotlin'

repositories {
    jcenter()
}

dependencies {
    implementation gradleApi()
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"

    implementation 'io.reactivex.rxjava2:rxjava:2.1.14'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.nhaarman:mockito-kotlin:1.5.0'
    testImplementation 'org.amshove.kluent:kluent:1.34'
}

test {
    //ignoreFailures true
    testLogging {
        exceptionFormat = 'full'
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true
        events = ["passed", "skipped", "failed", "standardOut", "standardError"]
    }
}

version = "1.8"
group = "com.toddway"
jar.baseName = "buildChecks"

pluginBundle {
    website = "https://github.com/toddway/BuildChecks"
    vcsUrl = "https://github.com/toddway/BuildChecks.git"
    description = "post summaries of code analyzer output to GitHub or BitBucket"
    tags = ["build checks"]

    plugins {
        buildChecks {
            id = "com.toddway.buildchecks"
            displayName = "Build Checks"
        }
    }
}

apply plugin: 'jacoco'
task coverage(type: JacocoReport, dependsOn: "test") {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    // what to exclude from coverage report
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Fragment.*',
            '**/*Activity.*',
            '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
            '**/*Module.*', // Modules for Dagger.
            '**/*Module_*Factory*', // Modules for Dagger.
            '**/*Dagger*.*', // Dagger auto-generated code.
            '**/*MembersInjector*.*', // Dagger auto-generated code.
            '**/*_Provide*Factory*.*',
            '**/*_Factory.*', //Dagger auto-generated code
            '**/*$*$*.*' // Anonymous classes generated by kotlin
    ]

    classDirectories = fileTree(
            dir: "$buildDir/classes/java", excludes: excludes
    ) + fileTree(
            dir: "$buildDir/classes/kotlin", excludes: excludes
    )

    sourceDirectories = files(["src/main/kotlin"])
    executionData = files("$buildDir/jacoco/test.exec")
}


postChecks.dependsOn(build)
printChecks.dependsOn(build)
build.dependsOn(coverage)
build.dependsOn(detektCheck)