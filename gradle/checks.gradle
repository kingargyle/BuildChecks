test {
    //ignoreFailures true
    testLogging {
        exceptionFormat = 'full'
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true
        events = ["passed", "skipped", "failed", "standardOut", "standardError"]
    }
}


detekt {
    version = "1.0.0.RC6"
    profile("main") {
        input = "$projectDir/src/main/kotlin"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
        output = "$projectDir/build/reports"
    }
}

apply plugin: 'jacoco'
task coverage(type: JacocoReport, dependsOn: "test") {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    // what to exclude from coverage report
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Fragment.*',
            '**/*Activity.*',
            '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
            '**/*Module.*', // Modules for Dagger.
            '**/*Module_*Factory*', // Modules for Dagger.
            '**/*Dagger*.*', // Dagger auto-generated code.
            '**/*MembersInjector*.*', // Dagger auto-generated code.
            '**/*_Provide*Factory*.*',
            '**/*_Factory.*', //Dagger auto-generated code
            '**/*$*$*.*' // Anonymous classes generated by kotlin
    ]

    classDirectories = fileTree(
            dir: "$buildDir/classes/java", excludes: excludes
    ) + fileTree(
            dir: "$buildDir/classes/kotlin", excludes: excludes
    )

    sourceDirectories = files(["src/main/kotlin"])
    executionData = files("$buildDir/jacoco/test.exec")
}

build.dependsOn(coverage, detektCheck)